package ftd2xx;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : lib\ftd2xx\ftd2xx.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("ftd2xx") 
public class ft_program_data extends StructObject {
	static {
		BridJ.register();
	}
	/** Header - must be 0x00000000 */
	@Field(0) 
	public int Signature1() {
		return this.io.getIntField(this, 0);
	}
	/** Header - must be 0x00000000 */
	@Field(0) 
	public ft_program_data Signature1(int Signature1) {
		this.io.setIntField(this, 0, Signature1);
		return this;
	}
	/** Header - must be 0xffffffff */
	@Field(1) 
	public int Signature2() {
		return this.io.getIntField(this, 1);
	}
	/** Header - must be 0xffffffff */
	@Field(1) 
	public ft_program_data Signature2(int Signature2) {
		this.io.setIntField(this, 1, Signature2);
		return this;
	}
	/** Header - FT_PROGRAM_DATA version */
	@Field(2) 
	public int Version() {
		return this.io.getIntField(this, 2);
	}
	/** Header - FT_PROGRAM_DATA version */
	@Field(2) 
	public ft_program_data Version(int Version) {
		this.io.setIntField(this, 2, Version);
		return this;
	}
	/** 0x0403 */
	@Field(3) 
	public short VendorId() {
		return this.io.getShortField(this, 3);
	}
	/** 0x0403 */
	@Field(3) 
	public ft_program_data VendorId(short VendorId) {
		this.io.setShortField(this, 3, VendorId);
		return this;
	}
	/** 0x6001 */
	@Field(4) 
	public short ProductId() {
		return this.io.getShortField(this, 4);
	}
	/** 0x6001 */
	@Field(4) 
	public ft_program_data ProductId(short ProductId) {
		this.io.setShortField(this, 4, ProductId);
		return this;
	}
	/**
	 * "FTDI"<br>
	 * C type : char*
	 */
	@Field(5) 
	public Pointer<Byte > Manufacturer() {
		return this.io.getPointerField(this, 5);
	}
	/**
	 * "FTDI"<br>
	 * C type : char*
	 */
	@Field(5) 
	public ft_program_data Manufacturer(Pointer<Byte > Manufacturer) {
		this.io.setPointerField(this, 5, Manufacturer);
		return this;
	}
	/**
	 * "FT"<br>
	 * C type : char*
	 */
	@Field(6) 
	public Pointer<Byte > ManufacturerId() {
		return this.io.getPointerField(this, 6);
	}
	/**
	 * "FT"<br>
	 * C type : char*
	 */
	@Field(6) 
	public ft_program_data ManufacturerId(Pointer<Byte > ManufacturerId) {
		this.io.setPointerField(this, 6, ManufacturerId);
		return this;
	}
	/**
	 * "USB HS Serial Converter"<br>
	 * C type : char*
	 */
	@Field(7) 
	public Pointer<Byte > Description() {
		return this.io.getPointerField(this, 7);
	}
	/**
	 * "USB HS Serial Converter"<br>
	 * C type : char*
	 */
	@Field(7) 
	public ft_program_data Description(Pointer<Byte > Description) {
		this.io.setPointerField(this, 7, Description);
		return this;
	}
	/**
	 * "FT000001" if fixed, or NULL<br>
	 * C type : char*
	 */
	@Field(8) 
	public Pointer<Byte > SerialNumber() {
		return this.io.getPointerField(this, 8);
	}
	/**
	 * "FT000001" if fixed, or NULL<br>
	 * C type : char*
	 */
	@Field(8) 
	public ft_program_data SerialNumber(Pointer<Byte > SerialNumber) {
		this.io.setPointerField(this, 8, SerialNumber);
		return this;
	}
	/** 0 < MaxPower <= 500 */
	@Field(9) 
	public short MaxPower() {
		return this.io.getShortField(this, 9);
	}
	/** 0 < MaxPower <= 500 */
	@Field(9) 
	public ft_program_data MaxPower(short MaxPower) {
		this.io.setShortField(this, 9, MaxPower);
		return this;
	}
	/** 0 = disabled, 1 = enabled */
	@Field(10) 
	public short PnP() {
		return this.io.getShortField(this, 10);
	}
	/** 0 = disabled, 1 = enabled */
	@Field(10) 
	public ft_program_data PnP(short PnP) {
		this.io.setShortField(this, 10, PnP);
		return this;
	}
	/** 0 = bus powered, 1 = self powered */
	@Field(11) 
	public short SelfPowered() {
		return this.io.getShortField(this, 11);
	}
	/** 0 = bus powered, 1 = self powered */
	@Field(11) 
	public ft_program_data SelfPowered(short SelfPowered) {
		this.io.setShortField(this, 11, SelfPowered);
		return this;
	}
	/** 0 = not capable, 1 = capable */
	@Field(12) 
	public short RemoteWakeup() {
		return this.io.getShortField(this, 12);
	}
	/** 0 = not capable, 1 = capable */
	@Field(12) 
	public ft_program_data RemoteWakeup(short RemoteWakeup) {
		this.io.setShortField(this, 12, RemoteWakeup);
		return this;
	}
	/**
	 * non-zero if Rev4 chip, zero otherwise<br>
	 * C type : UCHAR
	 */
	@Field(13) 
	public byte Rev4() {
		return this.io.getByteField(this, 13);
	}
	/**
	 * non-zero if Rev4 chip, zero otherwise<br>
	 * C type : UCHAR
	 */
	@Field(13) 
	public ft_program_data Rev4(byte Rev4) {
		this.io.setByteField(this, 13, Rev4);
		return this;
	}
	/**
	 * non-zero if in endpoint is isochronous<br>
	 * C type : UCHAR
	 */
	@Field(14) 
	public byte IsoIn() {
		return this.io.getByteField(this, 14);
	}
	/**
	 * non-zero if in endpoint is isochronous<br>
	 * C type : UCHAR
	 */
	@Field(14) 
	public ft_program_data IsoIn(byte IsoIn) {
		this.io.setByteField(this, 14, IsoIn);
		return this;
	}
	/**
	 * non-zero if out endpoint is isochronous<br>
	 * C type : UCHAR
	 */
	@Field(15) 
	public byte IsoOut() {
		return this.io.getByteField(this, 15);
	}
	/**
	 * non-zero if out endpoint is isochronous<br>
	 * C type : UCHAR
	 */
	@Field(15) 
	public ft_program_data IsoOut(byte IsoOut) {
		this.io.setByteField(this, 15, IsoOut);
		return this;
	}
	/**
	 * non-zero if pull down enabled<br>
	 * C type : UCHAR
	 */
	@Field(16) 
	public byte PullDownEnable() {
		return this.io.getByteField(this, 16);
	}
	/**
	 * non-zero if pull down enabled<br>
	 * C type : UCHAR
	 */
	@Field(16) 
	public ft_program_data PullDownEnable(byte PullDownEnable) {
		this.io.setByteField(this, 16, PullDownEnable);
		return this;
	}
	/**
	 * non-zero if serial number to be used<br>
	 * C type : UCHAR
	 */
	@Field(17) 
	public byte SerNumEnable() {
		return this.io.getByteField(this, 17);
	}
	/**
	 * non-zero if serial number to be used<br>
	 * C type : UCHAR
	 */
	@Field(17) 
	public ft_program_data SerNumEnable(byte SerNumEnable) {
		this.io.setByteField(this, 17, SerNumEnable);
		return this;
	}
	/**
	 * non-zero if chip uses USBVersion<br>
	 * C type : UCHAR
	 */
	@Field(18) 
	public byte USBVersionEnable() {
		return this.io.getByteField(this, 18);
	}
	/**
	 * non-zero if chip uses USBVersion<br>
	 * C type : UCHAR
	 */
	@Field(18) 
	public ft_program_data USBVersionEnable(byte USBVersionEnable) {
		this.io.setByteField(this, 18, USBVersionEnable);
		return this;
	}
	/** BCD (0x0200 => USB2) */
	@Field(19) 
	public short USBVersion() {
		return this.io.getShortField(this, 19);
	}
	/** BCD (0x0200 => USB2) */
	@Field(19) 
	public ft_program_data USBVersion(short USBVersion) {
		this.io.setShortField(this, 19, USBVersion);
		return this;
	}
	/**
	 * non-zero if Rev5 chip, zero otherwise<br>
	 * C type : UCHAR
	 */
	@Field(20) 
	public byte Rev5() {
		return this.io.getByteField(this, 20);
	}
	/**
	 * non-zero if Rev5 chip, zero otherwise<br>
	 * C type : UCHAR
	 */
	@Field(20) 
	public ft_program_data Rev5(byte Rev5) {
		this.io.setByteField(this, 20, Rev5);
		return this;
	}
	/**
	 * non-zero if in endpoint is isochronous<br>
	 * C type : UCHAR
	 */
	@Field(21) 
	public byte IsoInA() {
		return this.io.getByteField(this, 21);
	}
	/**
	 * non-zero if in endpoint is isochronous<br>
	 * C type : UCHAR
	 */
	@Field(21) 
	public ft_program_data IsoInA(byte IsoInA) {
		this.io.setByteField(this, 21, IsoInA);
		return this;
	}
	/**
	 * non-zero if in endpoint is isochronous<br>
	 * C type : UCHAR
	 */
	@Field(22) 
	public byte IsoInB() {
		return this.io.getByteField(this, 22);
	}
	/**
	 * non-zero if in endpoint is isochronous<br>
	 * C type : UCHAR
	 */
	@Field(22) 
	public ft_program_data IsoInB(byte IsoInB) {
		this.io.setByteField(this, 22, IsoInB);
		return this;
	}
	/**
	 * non-zero if out endpoint is isochronous<br>
	 * C type : UCHAR
	 */
	@Field(23) 
	public byte IsoOutA() {
		return this.io.getByteField(this, 23);
	}
	/**
	 * non-zero if out endpoint is isochronous<br>
	 * C type : UCHAR
	 */
	@Field(23) 
	public ft_program_data IsoOutA(byte IsoOutA) {
		this.io.setByteField(this, 23, IsoOutA);
		return this;
	}
	/**
	 * non-zero if out endpoint is isochronous<br>
	 * C type : UCHAR
	 */
	@Field(24) 
	public byte IsoOutB() {
		return this.io.getByteField(this, 24);
	}
	/**
	 * non-zero if out endpoint is isochronous<br>
	 * C type : UCHAR
	 */
	@Field(24) 
	public ft_program_data IsoOutB(byte IsoOutB) {
		this.io.setByteField(this, 24, IsoOutB);
		return this;
	}
	/**
	 * non-zero if pull down enabled<br>
	 * C type : UCHAR
	 */
	@Field(25) 
	public byte PullDownEnable5() {
		return this.io.getByteField(this, 25);
	}
	/**
	 * non-zero if pull down enabled<br>
	 * C type : UCHAR
	 */
	@Field(25) 
	public ft_program_data PullDownEnable5(byte PullDownEnable5) {
		this.io.setByteField(this, 25, PullDownEnable5);
		return this;
	}
	/**
	 * non-zero if serial number to be used<br>
	 * C type : UCHAR
	 */
	@Field(26) 
	public byte SerNumEnable5() {
		return this.io.getByteField(this, 26);
	}
	/**
	 * non-zero if serial number to be used<br>
	 * C type : UCHAR
	 */
	@Field(26) 
	public ft_program_data SerNumEnable5(byte SerNumEnable5) {
		this.io.setByteField(this, 26, SerNumEnable5);
		return this;
	}
	/**
	 * non-zero if chip uses USBVersion<br>
	 * C type : UCHAR
	 */
	@Field(27) 
	public byte USBVersionEnable5() {
		return this.io.getByteField(this, 27);
	}
	/**
	 * non-zero if chip uses USBVersion<br>
	 * C type : UCHAR
	 */
	@Field(27) 
	public ft_program_data USBVersionEnable5(byte USBVersionEnable5) {
		this.io.setByteField(this, 27, USBVersionEnable5);
		return this;
	}
	/** BCD (0x0200 => USB2) */
	@Field(28) 
	public short USBVersion5() {
		return this.io.getShortField(this, 28);
	}
	/** BCD (0x0200 => USB2) */
	@Field(28) 
	public ft_program_data USBVersion5(short USBVersion5) {
		this.io.setShortField(this, 28, USBVersion5);
		return this;
	}
	/**
	 * non-zero if interface is high current<br>
	 * C type : UCHAR
	 */
	@Field(29) 
	public byte AIsHighCurrent() {
		return this.io.getByteField(this, 29);
	}
	/**
	 * non-zero if interface is high current<br>
	 * C type : UCHAR
	 */
	@Field(29) 
	public ft_program_data AIsHighCurrent(byte AIsHighCurrent) {
		this.io.setByteField(this, 29, AIsHighCurrent);
		return this;
	}
	/**
	 * non-zero if interface is high current<br>
	 * C type : UCHAR
	 */
	@Field(30) 
	public byte BIsHighCurrent() {
		return this.io.getByteField(this, 30);
	}
	/**
	 * non-zero if interface is high current<br>
	 * C type : UCHAR
	 */
	@Field(30) 
	public ft_program_data BIsHighCurrent(byte BIsHighCurrent) {
		this.io.setByteField(this, 30, BIsHighCurrent);
		return this;
	}
	/**
	 * non-zero if interface is 245 FIFO<br>
	 * C type : UCHAR
	 */
	@Field(31) 
	public byte IFAIsFifo() {
		return this.io.getByteField(this, 31);
	}
	/**
	 * non-zero if interface is 245 FIFO<br>
	 * C type : UCHAR
	 */
	@Field(31) 
	public ft_program_data IFAIsFifo(byte IFAIsFifo) {
		this.io.setByteField(this, 31, IFAIsFifo);
		return this;
	}
	/**
	 * non-zero if interface is 245 FIFO CPU target<br>
	 * C type : UCHAR
	 */
	@Field(32) 
	public byte IFAIsFifoTar() {
		return this.io.getByteField(this, 32);
	}
	/**
	 * non-zero if interface is 245 FIFO CPU target<br>
	 * C type : UCHAR
	 */
	@Field(32) 
	public ft_program_data IFAIsFifoTar(byte IFAIsFifoTar) {
		this.io.setByteField(this, 32, IFAIsFifoTar);
		return this;
	}
	/**
	 * non-zero if interface is Fast serial<br>
	 * C type : UCHAR
	 */
	@Field(33) 
	public byte IFAIsFastSer() {
		return this.io.getByteField(this, 33);
	}
	/**
	 * non-zero if interface is Fast serial<br>
	 * C type : UCHAR
	 */
	@Field(33) 
	public ft_program_data IFAIsFastSer(byte IFAIsFastSer) {
		this.io.setByteField(this, 33, IFAIsFastSer);
		return this;
	}
	/**
	 * non-zero if interface is to use VCP drivers<br>
	 * C type : UCHAR
	 */
	@Field(34) 
	public byte AIsVCP() {
		return this.io.getByteField(this, 34);
	}
	/**
	 * non-zero if interface is to use VCP drivers<br>
	 * C type : UCHAR
	 */
	@Field(34) 
	public ft_program_data AIsVCP(byte AIsVCP) {
		this.io.setByteField(this, 34, AIsVCP);
		return this;
	}
	/**
	 * non-zero if interface is 245 FIFO<br>
	 * C type : UCHAR
	 */
	@Field(35) 
	public byte IFBIsFifo() {
		return this.io.getByteField(this, 35);
	}
	/**
	 * non-zero if interface is 245 FIFO<br>
	 * C type : UCHAR
	 */
	@Field(35) 
	public ft_program_data IFBIsFifo(byte IFBIsFifo) {
		this.io.setByteField(this, 35, IFBIsFifo);
		return this;
	}
	/**
	 * non-zero if interface is 245 FIFO CPU target<br>
	 * C type : UCHAR
	 */
	@Field(36) 
	public byte IFBIsFifoTar() {
		return this.io.getByteField(this, 36);
	}
	/**
	 * non-zero if interface is 245 FIFO CPU target<br>
	 * C type : UCHAR
	 */
	@Field(36) 
	public ft_program_data IFBIsFifoTar(byte IFBIsFifoTar) {
		this.io.setByteField(this, 36, IFBIsFifoTar);
		return this;
	}
	/**
	 * non-zero if interface is Fast serial<br>
	 * C type : UCHAR
	 */
	@Field(37) 
	public byte IFBIsFastSer() {
		return this.io.getByteField(this, 37);
	}
	/**
	 * non-zero if interface is Fast serial<br>
	 * C type : UCHAR
	 */
	@Field(37) 
	public ft_program_data IFBIsFastSer(byte IFBIsFastSer) {
		this.io.setByteField(this, 37, IFBIsFastSer);
		return this;
	}
	/**
	 * non-zero if interface is to use VCP drivers<br>
	 * C type : UCHAR
	 */
	@Field(38) 
	public byte BIsVCP() {
		return this.io.getByteField(this, 38);
	}
	/**
	 * non-zero if interface is to use VCP drivers<br>
	 * C type : UCHAR
	 */
	@Field(38) 
	public ft_program_data BIsVCP(byte BIsVCP) {
		this.io.setByteField(this, 38, BIsVCP);
		return this;
	}
	/**
	 * Use External Oscillator<br>
	 * C type : UCHAR
	 */
	@Field(39) 
	public byte UseExtOsc() {
		return this.io.getByteField(this, 39);
	}
	/**
	 * Use External Oscillator<br>
	 * C type : UCHAR
	 */
	@Field(39) 
	public ft_program_data UseExtOsc(byte UseExtOsc) {
		this.io.setByteField(this, 39, UseExtOsc);
		return this;
	}
	/**
	 * High Drive I/Os<br>
	 * C type : UCHAR
	 */
	@Field(40) 
	public byte HighDriveIOs() {
		return this.io.getByteField(this, 40);
	}
	/**
	 * High Drive I/Os<br>
	 * C type : UCHAR
	 */
	@Field(40) 
	public ft_program_data HighDriveIOs(byte HighDriveIOs) {
		this.io.setByteField(this, 40, HighDriveIOs);
		return this;
	}
	/**
	 * Endpoint size<br>
	 * C type : UCHAR
	 */
	@Field(41) 
	public byte EndpointSize() {
		return this.io.getByteField(this, 41);
	}
	/**
	 * Endpoint size<br>
	 * C type : UCHAR
	 */
	@Field(41) 
	public ft_program_data EndpointSize(byte EndpointSize) {
		this.io.setByteField(this, 41, EndpointSize);
		return this;
	}
	/**
	 * non-zero if pull down enabled<br>
	 * C type : UCHAR
	 */
	@Field(42) 
	public byte PullDownEnableR() {
		return this.io.getByteField(this, 42);
	}
	/**
	 * non-zero if pull down enabled<br>
	 * C type : UCHAR
	 */
	@Field(42) 
	public ft_program_data PullDownEnableR(byte PullDownEnableR) {
		this.io.setByteField(this, 42, PullDownEnableR);
		return this;
	}
	/**
	 * non-zero if serial number to be used<br>
	 * C type : UCHAR
	 */
	@Field(43) 
	public byte SerNumEnableR() {
		return this.io.getByteField(this, 43);
	}
	/**
	 * non-zero if serial number to be used<br>
	 * C type : UCHAR
	 */
	@Field(43) 
	public ft_program_data SerNumEnableR(byte SerNumEnableR) {
		this.io.setByteField(this, 43, SerNumEnableR);
		return this;
	}
	/**
	 * non-zero if invert TXD<br>
	 * C type : UCHAR
	 */
	@Field(44) 
	public byte InvertTXD() {
		return this.io.getByteField(this, 44);
	}
	/**
	 * non-zero if invert TXD<br>
	 * C type : UCHAR
	 */
	@Field(44) 
	public ft_program_data InvertTXD(byte InvertTXD) {
		this.io.setByteField(this, 44, InvertTXD);
		return this;
	}
	/**
	 * non-zero if invert RXD<br>
	 * C type : UCHAR
	 */
	@Field(45) 
	public byte InvertRXD() {
		return this.io.getByteField(this, 45);
	}
	/**
	 * non-zero if invert RXD<br>
	 * C type : UCHAR
	 */
	@Field(45) 
	public ft_program_data InvertRXD(byte InvertRXD) {
		this.io.setByteField(this, 45, InvertRXD);
		return this;
	}
	/**
	 * non-zero if invert RTS<br>
	 * C type : UCHAR
	 */
	@Field(46) 
	public byte InvertRTS() {
		return this.io.getByteField(this, 46);
	}
	/**
	 * non-zero if invert RTS<br>
	 * C type : UCHAR
	 */
	@Field(46) 
	public ft_program_data InvertRTS(byte InvertRTS) {
		this.io.setByteField(this, 46, InvertRTS);
		return this;
	}
	/**
	 * non-zero if invert CTS<br>
	 * C type : UCHAR
	 */
	@Field(47) 
	public byte InvertCTS() {
		return this.io.getByteField(this, 47);
	}
	/**
	 * non-zero if invert CTS<br>
	 * C type : UCHAR
	 */
	@Field(47) 
	public ft_program_data InvertCTS(byte InvertCTS) {
		this.io.setByteField(this, 47, InvertCTS);
		return this;
	}
	/**
	 * non-zero if invert DTR<br>
	 * C type : UCHAR
	 */
	@Field(48) 
	public byte InvertDTR() {
		return this.io.getByteField(this, 48);
	}
	/**
	 * non-zero if invert DTR<br>
	 * C type : UCHAR
	 */
	@Field(48) 
	public ft_program_data InvertDTR(byte InvertDTR) {
		this.io.setByteField(this, 48, InvertDTR);
		return this;
	}
	/**
	 * non-zero if invert DSR<br>
	 * C type : UCHAR
	 */
	@Field(49) 
	public byte InvertDSR() {
		return this.io.getByteField(this, 49);
	}
	/**
	 * non-zero if invert DSR<br>
	 * C type : UCHAR
	 */
	@Field(49) 
	public ft_program_data InvertDSR(byte InvertDSR) {
		this.io.setByteField(this, 49, InvertDSR);
		return this;
	}
	/**
	 * non-zero if invert DCD<br>
	 * C type : UCHAR
	 */
	@Field(50) 
	public byte InvertDCD() {
		return this.io.getByteField(this, 50);
	}
	/**
	 * non-zero if invert DCD<br>
	 * C type : UCHAR
	 */
	@Field(50) 
	public ft_program_data InvertDCD(byte InvertDCD) {
		this.io.setByteField(this, 50, InvertDCD);
		return this;
	}
	/**
	 * non-zero if invert RI<br>
	 * C type : UCHAR
	 */
	@Field(51) 
	public byte InvertRI() {
		return this.io.getByteField(this, 51);
	}
	/**
	 * non-zero if invert RI<br>
	 * C type : UCHAR
	 */
	@Field(51) 
	public ft_program_data InvertRI(byte InvertRI) {
		this.io.setByteField(this, 51, InvertRI);
		return this;
	}
	/**
	 * Cbus Mux control<br>
	 * C type : UCHAR
	 */
	@Field(52) 
	public byte Cbus0() {
		return this.io.getByteField(this, 52);
	}
	/**
	 * Cbus Mux control<br>
	 * C type : UCHAR
	 */
	@Field(52) 
	public ft_program_data Cbus0(byte Cbus0) {
		this.io.setByteField(this, 52, Cbus0);
		return this;
	}
	/**
	 * Cbus Mux control<br>
	 * C type : UCHAR
	 */
	@Field(53) 
	public byte Cbus1() {
		return this.io.getByteField(this, 53);
	}
	/**
	 * Cbus Mux control<br>
	 * C type : UCHAR
	 */
	@Field(53) 
	public ft_program_data Cbus1(byte Cbus1) {
		this.io.setByteField(this, 53, Cbus1);
		return this;
	}
	/**
	 * Cbus Mux control<br>
	 * C type : UCHAR
	 */
	@Field(54) 
	public byte Cbus2() {
		return this.io.getByteField(this, 54);
	}
	/**
	 * Cbus Mux control<br>
	 * C type : UCHAR
	 */
	@Field(54) 
	public ft_program_data Cbus2(byte Cbus2) {
		this.io.setByteField(this, 54, Cbus2);
		return this;
	}
	/**
	 * Cbus Mux control<br>
	 * C type : UCHAR
	 */
	@Field(55) 
	public byte Cbus3() {
		return this.io.getByteField(this, 55);
	}
	/**
	 * Cbus Mux control<br>
	 * C type : UCHAR
	 */
	@Field(55) 
	public ft_program_data Cbus3(byte Cbus3) {
		this.io.setByteField(this, 55, Cbus3);
		return this;
	}
	/**
	 * Cbus Mux control<br>
	 * C type : UCHAR
	 */
	@Field(56) 
	public byte Cbus4() {
		return this.io.getByteField(this, 56);
	}
	/**
	 * Cbus Mux control<br>
	 * C type : UCHAR
	 */
	@Field(56) 
	public ft_program_data Cbus4(byte Cbus4) {
		this.io.setByteField(this, 56, Cbus4);
		return this;
	}
	/**
	 * non-zero if using D2XX driver<br>
	 * C type : UCHAR
	 */
	@Field(57) 
	public byte RIsD2XX() {
		return this.io.getByteField(this, 57);
	}
	/**
	 * non-zero if using D2XX driver<br>
	 * C type : UCHAR
	 */
	@Field(57) 
	public ft_program_data RIsD2XX(byte RIsD2XX) {
		this.io.setByteField(this, 57, RIsD2XX);
		return this;
	}
	public ft_program_data() {
		super();
	}
	public ft_program_data(Pointer pointer) {
		super(pointer);
	}
}
