package ftd2xx;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : lib\ftd2xx\ftd2xx.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("ftd2xx") 
public class FTTIMEOUTS extends StructObject {
	static {
		BridJ.register();
	}
	/** Maximum time between read chars. */
	@Field(0) 
	public int ReadIntervalTimeout() {
		return this.io.getIntField(this, 0);
	}
	/** Maximum time between read chars. */
	@Field(0) 
	public FTTIMEOUTS ReadIntervalTimeout(int ReadIntervalTimeout) {
		this.io.setIntField(this, 0, ReadIntervalTimeout);
		return this;
	}
	/** Multiplier of characters. */
	@Field(1) 
	public int ReadTotalTimeoutMultiplier() {
		return this.io.getIntField(this, 1);
	}
	/** Multiplier of characters. */
	@Field(1) 
	public FTTIMEOUTS ReadTotalTimeoutMultiplier(int ReadTotalTimeoutMultiplier) {
		this.io.setIntField(this, 1, ReadTotalTimeoutMultiplier);
		return this;
	}
	/** Constant in milliseconds. */
	@Field(2) 
	public int ReadTotalTimeoutConstant() {
		return this.io.getIntField(this, 2);
	}
	/** Constant in milliseconds. */
	@Field(2) 
	public FTTIMEOUTS ReadTotalTimeoutConstant(int ReadTotalTimeoutConstant) {
		this.io.setIntField(this, 2, ReadTotalTimeoutConstant);
		return this;
	}
	/** Multiplier of characters. */
	@Field(3) 
	public int WriteTotalTimeoutMultiplier() {
		return this.io.getIntField(this, 3);
	}
	/** Multiplier of characters. */
	@Field(3) 
	public FTTIMEOUTS WriteTotalTimeoutMultiplier(int WriteTotalTimeoutMultiplier) {
		this.io.setIntField(this, 3, WriteTotalTimeoutMultiplier);
		return this;
	}
	/** Constant in milliseconds. */
	@Field(4) 
	public int WriteTotalTimeoutConstant() {
		return this.io.getIntField(this, 4);
	}
	/** Constant in milliseconds. */
	@Field(4) 
	public FTTIMEOUTS WriteTotalTimeoutConstant(int WriteTotalTimeoutConstant) {
		this.io.setIntField(this, 4, WriteTotalTimeoutConstant);
		return this;
	}
	public FTTIMEOUTS() {
		super();
	}
	public FTTIMEOUTS(Pointer pointer) {
		super(pointer);
	}
}
