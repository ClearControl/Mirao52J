package ftd2xx;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Bits;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : lib\ftd2xx\ftd2xx.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("ftd2xx") 
public class FTDCB extends StructObject {
	static {
		BridJ.register();
	}
	/** sizeof(FTDCB) */
	@Field(0) 
	public int DCBlength() {
		return this.io.getIntField(this, 0);
	}
	/** sizeof(FTDCB) */
	@Field(0) 
	public FTDCB DCBlength(int DCBlength) {
		this.io.setIntField(this, 0, DCBlength);
		return this;
	}
	/** Baudrate at which running */
	@Field(1) 
	public int BaudRate() {
		return this.io.getIntField(this, 1);
	}
	/** Baudrate at which running */
	@Field(1) 
	public FTDCB BaudRate(int BaudRate) {
		this.io.setIntField(this, 1, BaudRate);
		return this;
	}
	/** Binary Mode (skip EOF check) */
	@Field(2) 
	@Bits(1) 
	public int fBinary() {
		return this.io.getIntField(this, 2);
	}
	/** Binary Mode (skip EOF check) */
	@Field(2) 
	@Bits(1) 
	public FTDCB fBinary(int fBinary) {
		this.io.setIntField(this, 2, fBinary);
		return this;
	}
	/** Enable parity checking */
	@Field(3) 
	@Bits(1) 
	public int fParity() {
		return this.io.getIntField(this, 3);
	}
	/** Enable parity checking */
	@Field(3) 
	@Bits(1) 
	public FTDCB fParity(int fParity) {
		this.io.setIntField(this, 3, fParity);
		return this;
	}
	/** CTS handshaking on output */
	@Field(4) 
	@Bits(1) 
	public int fOutxCtsFlow() {
		return this.io.getIntField(this, 4);
	}
	/** CTS handshaking on output */
	@Field(4) 
	@Bits(1) 
	public FTDCB fOutxCtsFlow(int fOutxCtsFlow) {
		this.io.setIntField(this, 4, fOutxCtsFlow);
		return this;
	}
	/** DSR handshaking on output */
	@Field(5) 
	@Bits(1) 
	public int fOutxDsrFlow() {
		return this.io.getIntField(this, 5);
	}
	/** DSR handshaking on output */
	@Field(5) 
	@Bits(1) 
	public FTDCB fOutxDsrFlow(int fOutxDsrFlow) {
		this.io.setIntField(this, 5, fOutxDsrFlow);
		return this;
	}
	/** DTR Flow control */
	@Field(6) 
	@Bits(2) 
	public int fDtrControl() {
		return this.io.getIntField(this, 6);
	}
	/** DTR Flow control */
	@Field(6) 
	@Bits(2) 
	public FTDCB fDtrControl(int fDtrControl) {
		this.io.setIntField(this, 6, fDtrControl);
		return this;
	}
	/** DSR Sensitivity */
	@Field(7) 
	@Bits(1) 
	public int fDsrSensitivity() {
		return this.io.getIntField(this, 7);
	}
	/** DSR Sensitivity */
	@Field(7) 
	@Bits(1) 
	public FTDCB fDsrSensitivity(int fDsrSensitivity) {
		this.io.setIntField(this, 7, fDsrSensitivity);
		return this;
	}
	/** Continue TX when Xoff sent */
	@Field(8) 
	@Bits(1) 
	public int fTXContinueOnXoff() {
		return this.io.getIntField(this, 8);
	}
	/** Continue TX when Xoff sent */
	@Field(8) 
	@Bits(1) 
	public FTDCB fTXContinueOnXoff(int fTXContinueOnXoff) {
		this.io.setIntField(this, 8, fTXContinueOnXoff);
		return this;
	}
	/** Enable output X-ON/X-OFF */
	@Field(9) 
	@Bits(1) 
	public int fOutX() {
		return this.io.getIntField(this, 9);
	}
	/** Enable output X-ON/X-OFF */
	@Field(9) 
	@Bits(1) 
	public FTDCB fOutX(int fOutX) {
		this.io.setIntField(this, 9, fOutX);
		return this;
	}
	/** Enable input X-ON/X-OFF */
	@Field(10) 
	@Bits(1) 
	public int fInX() {
		return this.io.getIntField(this, 10);
	}
	/** Enable input X-ON/X-OFF */
	@Field(10) 
	@Bits(1) 
	public FTDCB fInX(int fInX) {
		this.io.setIntField(this, 10, fInX);
		return this;
	}
	/** Enable Err Replacement */
	@Field(11) 
	@Bits(1) 
	public int fErrorChar() {
		return this.io.getIntField(this, 11);
	}
	/** Enable Err Replacement */
	@Field(11) 
	@Bits(1) 
	public FTDCB fErrorChar(int fErrorChar) {
		this.io.setIntField(this, 11, fErrorChar);
		return this;
	}
	/** Enable Null stripping */
	@Field(12) 
	@Bits(1) 
	public int fNull() {
		return this.io.getIntField(this, 12);
	}
	/** Enable Null stripping */
	@Field(12) 
	@Bits(1) 
	public FTDCB fNull(int fNull) {
		this.io.setIntField(this, 12, fNull);
		return this;
	}
	/** Rts Flow control */
	@Field(13) 
	@Bits(2) 
	public int fRtsControl() {
		return this.io.getIntField(this, 13);
	}
	/** Rts Flow control */
	@Field(13) 
	@Bits(2) 
	public FTDCB fRtsControl(int fRtsControl) {
		this.io.setIntField(this, 13, fRtsControl);
		return this;
	}
	/** Abort all reads and writes on Error */
	@Field(14) 
	@Bits(1) 
	public int fAbortOnError() {
		return this.io.getIntField(this, 14);
	}
	/** Abort all reads and writes on Error */
	@Field(14) 
	@Bits(1) 
	public FTDCB fAbortOnError(int fAbortOnError) {
		this.io.setIntField(this, 14, fAbortOnError);
		return this;
	}
	/** Reserved */
	@Field(15) 
	@Bits(17) 
	public int fDummy2() {
		return this.io.getIntField(this, 15);
	}
	/** Reserved */
	@Field(15) 
	@Bits(17) 
	public FTDCB fDummy2(int fDummy2) {
		this.io.setIntField(this, 15, fDummy2);
		return this;
	}
	/** Not currently used */
	@Field(16) 
	public short wReserved() {
		return this.io.getShortField(this, 16);
	}
	/** Not currently used */
	@Field(16) 
	public FTDCB wReserved(short wReserved) {
		this.io.setShortField(this, 16, wReserved);
		return this;
	}
	/** Transmit X-ON threshold */
	@Field(17) 
	public short XonLim() {
		return this.io.getShortField(this, 17);
	}
	/** Transmit X-ON threshold */
	@Field(17) 
	public FTDCB XonLim(short XonLim) {
		this.io.setShortField(this, 17, XonLim);
		return this;
	}
	/** Transmit X-OFF threshold */
	@Field(18) 
	public short XoffLim() {
		return this.io.getShortField(this, 18);
	}
	/** Transmit X-OFF threshold */
	@Field(18) 
	public FTDCB XoffLim(short XoffLim) {
		this.io.setShortField(this, 18, XoffLim);
		return this;
	}
	/** Number of bits/byte, 4-8 */
	@Field(19) 
	public byte ByteSize() {
		return this.io.getByteField(this, 19);
	}
	/** Number of bits/byte, 4-8 */
	@Field(19) 
	public FTDCB ByteSize(byte ByteSize) {
		this.io.setByteField(this, 19, ByteSize);
		return this;
	}
	/** 0-4=None,Odd,Even,Mark,Space */
	@Field(20) 
	public byte Parity() {
		return this.io.getByteField(this, 20);
	}
	/** 0-4=None,Odd,Even,Mark,Space */
	@Field(20) 
	public FTDCB Parity(byte Parity) {
		this.io.setByteField(this, 20, Parity);
		return this;
	}
	/** 0,1,2 = 1, 1.5, 2 */
	@Field(21) 
	public byte StopBits() {
		return this.io.getByteField(this, 21);
	}
	/** 0,1,2 = 1, 1.5, 2 */
	@Field(21) 
	public FTDCB StopBits(byte StopBits) {
		this.io.setByteField(this, 21, StopBits);
		return this;
	}
	/** Tx and Rx X-ON character */
	@Field(22) 
	public byte XonChar() {
		return this.io.getByteField(this, 22);
	}
	/** Tx and Rx X-ON character */
	@Field(22) 
	public FTDCB XonChar(byte XonChar) {
		this.io.setByteField(this, 22, XonChar);
		return this;
	}
	/** Tx and Rx X-OFF character */
	@Field(23) 
	public byte XoffChar() {
		return this.io.getByteField(this, 23);
	}
	/** Tx and Rx X-OFF character */
	@Field(23) 
	public FTDCB XoffChar(byte XoffChar) {
		this.io.setByteField(this, 23, XoffChar);
		return this;
	}
	/** Error replacement char */
	@Field(24) 
	public byte ErrorChar() {
		return this.io.getByteField(this, 24);
	}
	/** Error replacement char */
	@Field(24) 
	public FTDCB ErrorChar(byte ErrorChar) {
		this.io.setByteField(this, 24, ErrorChar);
		return this;
	}
	/** End of Input character */
	@Field(25) 
	public byte EofChar() {
		return this.io.getByteField(this, 25);
	}
	/** End of Input character */
	@Field(25) 
	public FTDCB EofChar(byte EofChar) {
		this.io.setByteField(this, 25, EofChar);
		return this;
	}
	/** Received Event character */
	@Field(26) 
	public byte EvtChar() {
		return this.io.getByteField(this, 26);
	}
	/** Received Event character */
	@Field(26) 
	public FTDCB EvtChar(byte EvtChar) {
		this.io.setByteField(this, 26, EvtChar);
		return this;
	}
	/** Fill for now. */
	@Field(27) 
	public short wReserved1() {
		return this.io.getShortField(this, 27);
	}
	/** Fill for now. */
	@Field(27) 
	public FTDCB wReserved1(short wReserved1) {
		this.io.setShortField(this, 27, wReserved1);
		return this;
	}
	public FTDCB() {
		super();
	}
	public FTDCB(Pointer pointer) {
		super(pointer);
	}
}
