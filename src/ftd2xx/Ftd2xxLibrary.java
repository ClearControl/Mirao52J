package ftd2xx;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.ann.Convention.Style;
import org.bridj.ann.Convention;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>ftd2xx</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("ftd2xx") 
@Runtime(CRuntime.class) 
public class Ftd2xxLibrary {
	static {
		BridJ.register();
	}
	public static final int FT_OK = 0;
	public static final int FT_INVALID_HANDLE = 1;
	public static final int FT_DEVICE_NOT_FOUND = 2;
	public static final int FT_DEVICE_NOT_OPENED = 3;
	public static final int FT_IO_ERROR = 4;
	public static final int FT_INSUFFICIENT_RESOURCES = 5;
	public static final int FT_INVALID_PARAMETER = 6;
	public static final int FT_INVALID_BAUD_RATE = 7;
	public static final int FT_DEVICE_NOT_OPENED_FOR_ERASE = 8;
	public static final int FT_DEVICE_NOT_OPENED_FOR_WRITE = 9;
	public static final int FT_FAILED_TO_WRITE_DEVICE = 10;
	public static final int FT_EEPROM_READ_FAILED = 11;
	public static final int FT_EEPROM_WRITE_FAILED = 12;
	public static final int FT_EEPROM_ERASE_FAILED = 13;
	public static final int FT_EEPROM_NOT_PRESENT = 14;
	public static final int FT_EEPROM_NOT_PROGRAMMED = 15;
	public static final int FT_INVALID_ARGS = 16;
	public static final int FT_NOT_SUPPORTED = 17;
	public static final int FT_OTHER_ERROR = 18;
	public static final int FT_DEVICE_LIST_NOT_READY = 19;
	public static final int FT_DEVICE_BM = 0;
	public static final int FT_DEVICE_AM = 1;
	public static final int FT_DEVICE_100AX = 2;
	public static final int FT_DEVICE_UNKNOWN = 3;
	public static final int FT_DEVICE_2232C = 4;
	public static final int FT_DEVICE_232R = 5;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_BAUD_460800 = (int)460800;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_PURGE_RX = (int)1;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_BAUD_19200 = (int)19200;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_BAUD_4800 = (int)4800;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_BAUD_921600 = (int)921600;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_FLOW_XON_XOFF = (int)0x0400;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_LIST_BY_INDEX = (int)0x40000000;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_EVENT_RXCHAR = (int)1;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_DEFAULT_RX_TIMEOUT = (int)300;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_BAUD_600 = (int)600;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_BAUD_57600 = (int)57600;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_LIST_NUMBER_ONLY = (int)0x80000000;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_FLOW_NONE = (int)0x0000;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_BAUD_1200 = (int)1200;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_BAUD_9600 = (int)9600;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_LIST_ALL = (int)0x20000000;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_PURGE_TX = (int)2;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_OPEN_BY_DESCRIPTION = (int)2;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_BAUD_14400 = (int)14400;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_BAUD_115200 = (int)115200;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_DEFAULT_TX_TIMEOUT = (int)300;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_BAUD_2400 = (int)2400;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_FLOW_DTR_DSR = (int)0x0200;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_EVENT_MODEM_STATUS = (int)2;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_OPEN_BY_SERIAL_NUMBER = (int)1;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_BAUD_300 = (int)300;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_OPEN_BY_LOCATION = (int)4;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_BAUD_38400 = (int)38400;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_FLOW_RTS_CTS = (int)0x0100;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_LIST_MASK = (int)(0x80000000 | 0x40000000 | 0x20000000);
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static final int FT_BAUD_230400 = (int)230400;
	/** <i>native declaration : lib\ftd2xx\ftd2xx.h</i> */
	public static abstract class PFT_EVENT_HANDLER extends Callback<PFT_EVENT_HANDLER > {
		public abstract void apply(int DWORD1, int DWORD2);
	};
	/**
	 * Original signature : <code>FT_STATUS FT_Open(int, FT_HANDLE*)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:191</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_Open") 
	@org.bridj.ann.CLong 
	public static long fTOpen(int deviceNumber, Pointer<Pointer<? > > pHandle) {
		return fTOpen(deviceNumber, Pointer.getPeer(pHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_Open") 
	@org.bridj.ann.CLong 
	protected native static long fTOpen(int deviceNumber, @Ptr long pHandle);
	/**
	 * Original signature : <code>FT_STATUS FT_OpenEx(PVOID, DWORD, FT_HANDLE*)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:197</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_OpenEx") 
	@org.bridj.ann.CLong 
	public static long fTOpenEx(Pointer<? > pArg1, int Flags, Pointer<Pointer<? > > pHandle) {
		return fTOpenEx(Pointer.getPeer(pArg1), Flags, Pointer.getPeer(pHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_OpenEx") 
	@org.bridj.ann.CLong 
	protected native static long fTOpenEx(@Ptr long pArg1, int Flags, @Ptr long pHandle);
	/**
	 * Original signature : <code>FT_STATUS FT_ListDevices(PVOID, PVOID, DWORD)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:204</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_ListDevices") 
	@org.bridj.ann.CLong 
	public static long fTListDevices(Pointer<? > pArg1, Pointer<? > pArg2, int Flags) {
		return fTListDevices(Pointer.getPeer(pArg1), Pointer.getPeer(pArg2), Flags);
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_ListDevices") 
	@org.bridj.ann.CLong 
	protected native static long fTListDevices(@Ptr long pArg1, @Ptr long pArg2, int Flags);
	/**
	 * Original signature : <code>FT_STATUS FT_Close(FT_HANDLE)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:211</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_Close") 
	@org.bridj.ann.CLong 
	public static long fTClose(Pointer<? > ftHandle) {
		return fTClose(Pointer.getPeer(ftHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_Close") 
	@org.bridj.ann.CLong 
	protected native static long fTClose(@Ptr long ftHandle);
	/**
	 * Original signature : <code>FT_STATUS FT_Read(FT_HANDLE, LPVOID, DWORD, LPDWORD)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:216</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_Read") 
	@org.bridj.ann.CLong 
	public static long fTRead(Pointer<? > ftHandle, Pointer<? > lpBuffer, int nBufferSize, Pointer<Integer > lpBytesReturned) {
		return fTRead(Pointer.getPeer(ftHandle), Pointer.getPeer(lpBuffer), nBufferSize, Pointer.getPeer(lpBytesReturned));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_Read") 
	@org.bridj.ann.CLong 
	protected native static long fTRead(@Ptr long ftHandle, @Ptr long lpBuffer, int nBufferSize, @Ptr long lpBytesReturned);
	/**
	 * Original signature : <code>FT_STATUS FT_Write(FT_HANDLE, LPVOID, DWORD, LPDWORD)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:224</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_Write") 
	@org.bridj.ann.CLong 
	public static long fTWrite(Pointer<? > ftHandle, Pointer<? > lpBuffer, int nBufferSize, Pointer<Integer > lpBytesWritten) {
		return fTWrite(Pointer.getPeer(ftHandle), Pointer.getPeer(lpBuffer), nBufferSize, Pointer.getPeer(lpBytesWritten));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_Write") 
	@org.bridj.ann.CLong 
	protected native static long fTWrite(@Ptr long ftHandle, @Ptr long lpBuffer, int nBufferSize, @Ptr long lpBytesWritten);
	/**
	 * Original signature : <code>FT_STATUS FT_IoCtl(FT_HANDLE, DWORD, LPVOID, DWORD, LPVOID, DWORD, LPDWORD, LPOVERLAPPED)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:232</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_IoCtl") 
	@org.bridj.ann.CLong 
	public static long fTIoCtl(Pointer<? > ftHandle, int dwIoControlCode, Pointer<? > lpInBuf, int nInBufSize, Pointer<? > lpOutBuf, int nOutBufSize, Pointer<Integer > lpBytesReturned, Pointer<OVERLAPPED > lpOverlapped) {
		return fTIoCtl(Pointer.getPeer(ftHandle), dwIoControlCode, Pointer.getPeer(lpInBuf), nInBufSize, Pointer.getPeer(lpOutBuf), nOutBufSize, Pointer.getPeer(lpBytesReturned), Pointer.getPeer(lpOverlapped));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_IoCtl") 
	@org.bridj.ann.CLong 
	protected native static long fTIoCtl(@Ptr long ftHandle, int dwIoControlCode, @Ptr long lpInBuf, int nInBufSize, @Ptr long lpOutBuf, int nOutBufSize, @Ptr long lpBytesReturned, @Ptr long lpOverlapped);
	/**
	 * Original signature : <code>FT_STATUS FT_SetBaudRate(FT_HANDLE, ULONG)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:244</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetBaudRate") 
	@org.bridj.ann.CLong 
	public static long fTSetBaudRate(Pointer<? > ftHandle, @org.bridj.ann.CLong long BaudRate) {
		return fTSetBaudRate(Pointer.getPeer(ftHandle), BaudRate);
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetBaudRate") 
	@org.bridj.ann.CLong 
	protected native static long fTSetBaudRate(@Ptr long ftHandle, @org.bridj.ann.CLong long BaudRate);
	/**
	 * Original signature : <code>FT_STATUS FT_SetDivisor(FT_HANDLE, USHORT)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:250</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetDivisor") 
	@org.bridj.ann.CLong 
	public static long fTSetDivisor(Pointer<? > ftHandle, short Divisor) {
		return fTSetDivisor(Pointer.getPeer(ftHandle), Divisor);
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetDivisor") 
	@org.bridj.ann.CLong 
	protected native static long fTSetDivisor(@Ptr long ftHandle, short Divisor);
	/**
	 * Original signature : <code>FT_STATUS FT_SetDataCharacteristics(FT_HANDLE, UCHAR, UCHAR, UCHAR)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:256</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetDataCharacteristics") 
	@org.bridj.ann.CLong 
	public static long fTSetDataCharacteristics(Pointer<? > ftHandle, byte WordLength, byte StopBits, byte Parity) {
		return fTSetDataCharacteristics(Pointer.getPeer(ftHandle), WordLength, StopBits, Parity);
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetDataCharacteristics") 
	@org.bridj.ann.CLong 
	protected native static long fTSetDataCharacteristics(@Ptr long ftHandle, byte WordLength, byte StopBits, byte Parity);
	/**
	 * Original signature : <code>FT_STATUS FT_SetFlowControl(FT_HANDLE, USHORT, UCHAR, UCHAR)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:264</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetFlowControl") 
	@org.bridj.ann.CLong 
	public static long fTSetFlowControl(Pointer<? > ftHandle, short FlowControl, byte XonChar, byte XoffChar) {
		return fTSetFlowControl(Pointer.getPeer(ftHandle), FlowControl, XonChar, XoffChar);
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetFlowControl") 
	@org.bridj.ann.CLong 
	protected native static long fTSetFlowControl(@Ptr long ftHandle, short FlowControl, byte XonChar, byte XoffChar);
	/**
	 * Original signature : <code>FT_STATUS FT_ResetDevice(FT_HANDLE)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:272</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_ResetDevice") 
	@org.bridj.ann.CLong 
	public static long fTResetDevice(Pointer<? > ftHandle) {
		return fTResetDevice(Pointer.getPeer(ftHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_ResetDevice") 
	@org.bridj.ann.CLong 
	protected native static long fTResetDevice(@Ptr long ftHandle);
	/**
	 * Original signature : <code>FT_STATUS FT_SetDtr(FT_HANDLE)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:277</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetDtr") 
	@org.bridj.ann.CLong 
	public static long fTSetDtr(Pointer<? > ftHandle) {
		return fTSetDtr(Pointer.getPeer(ftHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetDtr") 
	@org.bridj.ann.CLong 
	protected native static long fTSetDtr(@Ptr long ftHandle);
	/**
	 * Original signature : <code>FT_STATUS FT_ClrDtr(FT_HANDLE)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:282</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_ClrDtr") 
	@org.bridj.ann.CLong 
	public static long fTClrDtr(Pointer<? > ftHandle) {
		return fTClrDtr(Pointer.getPeer(ftHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_ClrDtr") 
	@org.bridj.ann.CLong 
	protected native static long fTClrDtr(@Ptr long ftHandle);
	/**
	 * Original signature : <code>FT_STATUS FT_SetRts(FT_HANDLE)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:287</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetRts") 
	@org.bridj.ann.CLong 
	public static long fTSetRts(Pointer<? > ftHandle) {
		return fTSetRts(Pointer.getPeer(ftHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetRts") 
	@org.bridj.ann.CLong 
	protected native static long fTSetRts(@Ptr long ftHandle);
	/**
	 * Original signature : <code>FT_STATUS FT_ClrRts(FT_HANDLE)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:292</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_ClrRts") 
	@org.bridj.ann.CLong 
	public static long fTClrRts(Pointer<? > ftHandle) {
		return fTClrRts(Pointer.getPeer(ftHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_ClrRts") 
	@org.bridj.ann.CLong 
	protected native static long fTClrRts(@Ptr long ftHandle);
	/**
	 * Original signature : <code>FT_STATUS FT_GetModemStatus(FT_HANDLE, ULONG*)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:297</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetModemStatus") 
	@org.bridj.ann.CLong 
	public static long fTGetModemStatus(Pointer<? > ftHandle, Pointer<org.bridj.CLong > pModemStatus) {
		return fTGetModemStatus(Pointer.getPeer(ftHandle), Pointer.getPeer(pModemStatus));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetModemStatus") 
	@org.bridj.ann.CLong 
	protected native static long fTGetModemStatus(@Ptr long ftHandle, @Ptr long pModemStatus);
	/**
	 * Original signature : <code>FT_STATUS FT_SetChars(FT_HANDLE, UCHAR, UCHAR, UCHAR, UCHAR)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:303</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetChars") 
	@org.bridj.ann.CLong 
	public static long fTSetChars(Pointer<? > ftHandle, byte EventChar, byte EventCharEnabled, byte ErrorChar, byte ErrorCharEnabled) {
		return fTSetChars(Pointer.getPeer(ftHandle), EventChar, EventCharEnabled, ErrorChar, ErrorCharEnabled);
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetChars") 
	@org.bridj.ann.CLong 
	protected native static long fTSetChars(@Ptr long ftHandle, byte EventChar, byte EventCharEnabled, byte ErrorChar, byte ErrorCharEnabled);
	/**
	 * Original signature : <code>FT_STATUS FT_Purge(FT_HANDLE, ULONG)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:312</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_Purge") 
	@org.bridj.ann.CLong 
	public static long fTPurge(Pointer<? > ftHandle, @org.bridj.ann.CLong long Mask) {
		return fTPurge(Pointer.getPeer(ftHandle), Mask);
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_Purge") 
	@org.bridj.ann.CLong 
	protected native static long fTPurge(@Ptr long ftHandle, @org.bridj.ann.CLong long Mask);
	/**
	 * Original signature : <code>FT_STATUS FT_SetTimeouts(FT_HANDLE, ULONG, ULONG)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:318</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetTimeouts") 
	@org.bridj.ann.CLong 
	public static long fTSetTimeouts(Pointer<? > ftHandle, @org.bridj.ann.CLong long ReadTimeout, @org.bridj.ann.CLong long WriteTimeout) {
		return fTSetTimeouts(Pointer.getPeer(ftHandle), ReadTimeout, WriteTimeout);
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetTimeouts") 
	@org.bridj.ann.CLong 
	protected native static long fTSetTimeouts(@Ptr long ftHandle, @org.bridj.ann.CLong long ReadTimeout, @org.bridj.ann.CLong long WriteTimeout);
	/**
	 * Original signature : <code>FT_STATUS FT_GetQueueStatus(FT_HANDLE, DWORD*)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:325</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetQueueStatus") 
	@org.bridj.ann.CLong 
	public static long fTGetQueueStatus(Pointer<? > ftHandle, Pointer<Integer > dwRxBytes) {
		return fTGetQueueStatus(Pointer.getPeer(ftHandle), Pointer.getPeer(dwRxBytes));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetQueueStatus") 
	@org.bridj.ann.CLong 
	protected native static long fTGetQueueStatus(@Ptr long ftHandle, @Ptr long dwRxBytes);
	/**
	 * Original signature : <code>FT_STATUS FT_SetEventNotification(FT_HANDLE, DWORD, PVOID)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:331</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetEventNotification") 
	@org.bridj.ann.CLong 
	public static long fTSetEventNotification(Pointer<? > ftHandle, int Mask, Pointer<? > Param) {
		return fTSetEventNotification(Pointer.getPeer(ftHandle), Mask, Pointer.getPeer(Param));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetEventNotification") 
	@org.bridj.ann.CLong 
	protected native static long fTSetEventNotification(@Ptr long ftHandle, int Mask, @Ptr long Param);
	/**
	 * Original signature : <code>FT_STATUS FT_GetStatus(FT_HANDLE, DWORD*, DWORD*, DWORD*)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:338</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetStatus") 
	@org.bridj.ann.CLong 
	public static long fTGetStatus(Pointer<? > ftHandle, Pointer<Integer > dwRxBytes, Pointer<Integer > dwTxBytes, Pointer<Integer > dwEventDWord) {
		return fTGetStatus(Pointer.getPeer(ftHandle), Pointer.getPeer(dwRxBytes), Pointer.getPeer(dwTxBytes), Pointer.getPeer(dwEventDWord));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetStatus") 
	@org.bridj.ann.CLong 
	protected native static long fTGetStatus(@Ptr long ftHandle, @Ptr long dwRxBytes, @Ptr long dwTxBytes, @Ptr long dwEventDWord);
	/**
	 * Original signature : <code>FT_STATUS FT_SetBreakOn(FT_HANDLE)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:346</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetBreakOn") 
	@org.bridj.ann.CLong 
	public static long fTSetBreakOn(Pointer<? > ftHandle) {
		return fTSetBreakOn(Pointer.getPeer(ftHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetBreakOn") 
	@org.bridj.ann.CLong 
	protected native static long fTSetBreakOn(@Ptr long ftHandle);
	/**
	 * Original signature : <code>FT_STATUS FT_SetBreakOff(FT_HANDLE)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:351</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetBreakOff") 
	@org.bridj.ann.CLong 
	public static long fTSetBreakOff(Pointer<? > ftHandle) {
		return fTSetBreakOff(Pointer.getPeer(ftHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetBreakOff") 
	@org.bridj.ann.CLong 
	protected native static long fTSetBreakOff(@Ptr long ftHandle);
	/**
	 * Original signature : <code>FT_STATUS FT_SetWaitMask(FT_HANDLE, DWORD)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:356</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetWaitMask") 
	@org.bridj.ann.CLong 
	public static long fTSetWaitMask(Pointer<? > ftHandle, int Mask) {
		return fTSetWaitMask(Pointer.getPeer(ftHandle), Mask);
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetWaitMask") 
	@org.bridj.ann.CLong 
	protected native static long fTSetWaitMask(@Ptr long ftHandle, int Mask);
	/**
	 * Original signature : <code>FT_STATUS FT_WaitOnMask(FT_HANDLE, DWORD*)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:362</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_WaitOnMask") 
	@org.bridj.ann.CLong 
	public static long fTWaitOnMask(Pointer<? > ftHandle, Pointer<Integer > Mask) {
		return fTWaitOnMask(Pointer.getPeer(ftHandle), Pointer.getPeer(Mask));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_WaitOnMask") 
	@org.bridj.ann.CLong 
	protected native static long fTWaitOnMask(@Ptr long ftHandle, @Ptr long Mask);
	/**
	 * Original signature : <code>FT_STATUS FT_GetEventStatus(FT_HANDLE, DWORD*)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:368</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetEventStatus") 
	@org.bridj.ann.CLong 
	public static long fTGetEventStatus(Pointer<? > ftHandle, Pointer<Integer > dwEventDWord) {
		return fTGetEventStatus(Pointer.getPeer(ftHandle), Pointer.getPeer(dwEventDWord));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetEventStatus") 
	@org.bridj.ann.CLong 
	protected native static long fTGetEventStatus(@Ptr long ftHandle, @Ptr long dwEventDWord);
	/**
	 * Original signature : <code>FT_STATUS FT_ReadEE(FT_HANDLE, DWORD, LPWORD)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:374</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_ReadEE") 
	@org.bridj.ann.CLong 
	public static long fTReadEE(Pointer<? > ftHandle, int dwWordOffset, Pointer<Short > lpwValue) {
		return fTReadEE(Pointer.getPeer(ftHandle), dwWordOffset, Pointer.getPeer(lpwValue));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_ReadEE") 
	@org.bridj.ann.CLong 
	protected native static long fTReadEE(@Ptr long ftHandle, int dwWordOffset, @Ptr long lpwValue);
	/**
	 * Original signature : <code>FT_STATUS FT_WriteEE(FT_HANDLE, DWORD, WORD)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:381</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_WriteEE") 
	@org.bridj.ann.CLong 
	public static long fTWriteEE(Pointer<? > ftHandle, int dwWordOffset, short wValue) {
		return fTWriteEE(Pointer.getPeer(ftHandle), dwWordOffset, wValue);
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_WriteEE") 
	@org.bridj.ann.CLong 
	protected native static long fTWriteEE(@Ptr long ftHandle, int dwWordOffset, short wValue);
	/**
	 * Original signature : <code>FT_STATUS FT_EraseEE(FT_HANDLE)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:388</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_EraseEE") 
	@org.bridj.ann.CLong 
	public static long fTEraseEE(Pointer<? > ftHandle) {
		return fTEraseEE(Pointer.getPeer(ftHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_EraseEE") 
	@org.bridj.ann.CLong 
	protected native static long fTEraseEE(@Ptr long ftHandle);
	/**
	 * Original signature : <code>FT_STATUS FT_EE_Program(FT_HANDLE, PFT_PROGRAM_DATA)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:476</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_EE_Program") 
	@org.bridj.ann.CLong 
	public static long fTEEProgram(Pointer<? > ftHandle, Pointer<ft_program_data > pData) {
		return fTEEProgram(Pointer.getPeer(ftHandle), Pointer.getPeer(pData));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_EE_Program") 
	@org.bridj.ann.CLong 
	protected native static long fTEEProgram(@Ptr long ftHandle, @Ptr long pData);
	/**
	 * Original signature : <code>FT_STATUS FT_EE_ProgramEx(FT_HANDLE, PFT_PROGRAM_DATA, char*, char*, char*, char*)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:482</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_EE_ProgramEx") 
	@org.bridj.ann.CLong 
	public static long fTEEProgramEx(Pointer<? > ftHandle, Pointer<ft_program_data > pData, Pointer<Byte > Manufacturer, Pointer<Byte > ManufacturerId, Pointer<Byte > Description, Pointer<Byte > SerialNumber) {
		return fTEEProgramEx(Pointer.getPeer(ftHandle), Pointer.getPeer(pData), Pointer.getPeer(Manufacturer), Pointer.getPeer(ManufacturerId), Pointer.getPeer(Description), Pointer.getPeer(SerialNumber));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_EE_ProgramEx") 
	@org.bridj.ann.CLong 
	protected native static long fTEEProgramEx(@Ptr long ftHandle, @Ptr long pData, @Ptr long Manufacturer, @Ptr long ManufacturerId, @Ptr long Description, @Ptr long SerialNumber);
	/**
	 * Original signature : <code>FT_STATUS FT_EE_Read(FT_HANDLE, PFT_PROGRAM_DATA)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:492</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_EE_Read") 
	@org.bridj.ann.CLong 
	public static long fTEERead(Pointer<? > ftHandle, Pointer<ft_program_data > pData) {
		return fTEERead(Pointer.getPeer(ftHandle), Pointer.getPeer(pData));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_EE_Read") 
	@org.bridj.ann.CLong 
	protected native static long fTEERead(@Ptr long ftHandle, @Ptr long pData);
	/**
	 * Original signature : <code>FT_STATUS FT_EE_ReadEx(FT_HANDLE, PFT_PROGRAM_DATA, char*, char*, char*, char*)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:498</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_EE_ReadEx") 
	@org.bridj.ann.CLong 
	public static long fTEEReadEx(Pointer<? > ftHandle, Pointer<ft_program_data > pData, Pointer<Byte > Manufacturer, Pointer<Byte > ManufacturerId, Pointer<Byte > Description, Pointer<Byte > SerialNumber) {
		return fTEEReadEx(Pointer.getPeer(ftHandle), Pointer.getPeer(pData), Pointer.getPeer(Manufacturer), Pointer.getPeer(ManufacturerId), Pointer.getPeer(Description), Pointer.getPeer(SerialNumber));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_EE_ReadEx") 
	@org.bridj.ann.CLong 
	protected native static long fTEEReadEx(@Ptr long ftHandle, @Ptr long pData, @Ptr long Manufacturer, @Ptr long ManufacturerId, @Ptr long Description, @Ptr long SerialNumber);
	/**
	 * Original signature : <code>FT_STATUS FT_EE_UASize(FT_HANDLE, LPDWORD)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:508</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_EE_UASize") 
	@org.bridj.ann.CLong 
	public static long fTEEUASize(Pointer<? > ftHandle, Pointer<Integer > lpdwSize) {
		return fTEEUASize(Pointer.getPeer(ftHandle), Pointer.getPeer(lpdwSize));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_EE_UASize") 
	@org.bridj.ann.CLong 
	protected native static long fTEEUASize(@Ptr long ftHandle, @Ptr long lpdwSize);
	/**
	 * Original signature : <code>FT_STATUS FT_EE_UAWrite(FT_HANDLE, PUCHAR, DWORD)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:514</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_EE_UAWrite") 
	@org.bridj.ann.CLong 
	public static long fTEEUAWrite(Pointer<? > ftHandle, Pointer<Byte > pucData, int dwDataLen) {
		return fTEEUAWrite(Pointer.getPeer(ftHandle), Pointer.getPeer(pucData), dwDataLen);
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_EE_UAWrite") 
	@org.bridj.ann.CLong 
	protected native static long fTEEUAWrite(@Ptr long ftHandle, @Ptr long pucData, int dwDataLen);
	/**
	 * Original signature : <code>FT_STATUS FT_EE_UARead(FT_HANDLE, PUCHAR, DWORD, LPDWORD)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:521</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_EE_UARead") 
	@org.bridj.ann.CLong 
	public static long fTEEUARead(Pointer<? > ftHandle, Pointer<Byte > pucData, int dwDataLen, Pointer<Integer > lpdwBytesRead) {
		return fTEEUARead(Pointer.getPeer(ftHandle), Pointer.getPeer(pucData), dwDataLen, Pointer.getPeer(lpdwBytesRead));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_EE_UARead") 
	@org.bridj.ann.CLong 
	protected native static long fTEEUARead(@Ptr long ftHandle, @Ptr long pucData, int dwDataLen, @Ptr long lpdwBytesRead);
	/**
	 * Original signature : <code>FT_STATUS FT_SetLatencyTimer(FT_HANDLE, UCHAR)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:529</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetLatencyTimer") 
	@org.bridj.ann.CLong 
	public static long fTSetLatencyTimer(Pointer<? > ftHandle, byte ucLatency) {
		return fTSetLatencyTimer(Pointer.getPeer(ftHandle), ucLatency);
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetLatencyTimer") 
	@org.bridj.ann.CLong 
	protected native static long fTSetLatencyTimer(@Ptr long ftHandle, byte ucLatency);
	/**
	 * Original signature : <code>FT_STATUS FT_GetLatencyTimer(FT_HANDLE, PUCHAR)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:535</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetLatencyTimer") 
	@org.bridj.ann.CLong 
	public static long fTGetLatencyTimer(Pointer<? > ftHandle, Pointer<Byte > pucLatency) {
		return fTGetLatencyTimer(Pointer.getPeer(ftHandle), Pointer.getPeer(pucLatency));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetLatencyTimer") 
	@org.bridj.ann.CLong 
	protected native static long fTGetLatencyTimer(@Ptr long ftHandle, @Ptr long pucLatency);
	/**
	 * Original signature : <code>FT_STATUS FT_SetBitMode(FT_HANDLE, UCHAR, UCHAR)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:541</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetBitMode") 
	@org.bridj.ann.CLong 
	public static long fTSetBitMode(Pointer<? > ftHandle, byte ucMask, byte ucEnable) {
		return fTSetBitMode(Pointer.getPeer(ftHandle), ucMask, ucEnable);
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetBitMode") 
	@org.bridj.ann.CLong 
	protected native static long fTSetBitMode(@Ptr long ftHandle, byte ucMask, byte ucEnable);
	/**
	 * Original signature : <code>FT_STATUS FT_GetBitMode(FT_HANDLE, PUCHAR)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:548</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetBitMode") 
	@org.bridj.ann.CLong 
	public static long fTGetBitMode(Pointer<? > ftHandle, Pointer<Byte > pucMode) {
		return fTGetBitMode(Pointer.getPeer(ftHandle), Pointer.getPeer(pucMode));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetBitMode") 
	@org.bridj.ann.CLong 
	protected native static long fTGetBitMode(@Ptr long ftHandle, @Ptr long pucMode);
	/**
	 * Original signature : <code>FT_STATUS FT_SetUSBParameters(FT_HANDLE, ULONG, ULONG)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:554</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetUSBParameters") 
	@org.bridj.ann.CLong 
	public static long fTSetUSBParameters(Pointer<? > ftHandle, @org.bridj.ann.CLong long ulInTransferSize, @org.bridj.ann.CLong long ulOutTransferSize) {
		return fTSetUSBParameters(Pointer.getPeer(ftHandle), ulInTransferSize, ulOutTransferSize);
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetUSBParameters") 
	@org.bridj.ann.CLong 
	protected native static long fTSetUSBParameters(@Ptr long ftHandle, @org.bridj.ann.CLong long ulInTransferSize, @org.bridj.ann.CLong long ulOutTransferSize);
	/**
	 * Original signature : <code>FT_STATUS FT_SetDeadmanTimeout(FT_HANDLE, ULONG)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:561</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetDeadmanTimeout") 
	@org.bridj.ann.CLong 
	public static long fTSetDeadmanTimeout(Pointer<? > ftHandle, @org.bridj.ann.CLong long ulDeadmanTimeout) {
		return fTSetDeadmanTimeout(Pointer.getPeer(ftHandle), ulDeadmanTimeout);
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetDeadmanTimeout") 
	@org.bridj.ann.CLong 
	protected native static long fTSetDeadmanTimeout(@Ptr long ftHandle, @org.bridj.ann.CLong long ulDeadmanTimeout);
	/**
	 * Original signature : <code>FT_STATUS FT_GetDeviceInfo(FT_HANDLE, FT_DEVICE*, LPDWORD, PCHAR, PCHAR, LPVOID)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:567</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetDeviceInfo") 
	@org.bridj.ann.CLong 
	public static long fTGetDeviceInfo(Pointer<? > ftHandle, Pointer<org.bridj.CLong > lpftDevice, Pointer<Integer > lpdwID, Pointer<Byte > SerialNumber, Pointer<Byte > Description, Pointer<? > Dummy) {
		return fTGetDeviceInfo(Pointer.getPeer(ftHandle), Pointer.getPeer(lpftDevice), Pointer.getPeer(lpdwID), Pointer.getPeer(SerialNumber), Pointer.getPeer(Description), Pointer.getPeer(Dummy));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetDeviceInfo") 
	@org.bridj.ann.CLong 
	protected native static long fTGetDeviceInfo(@Ptr long ftHandle, @Ptr long lpftDevice, @Ptr long lpdwID, @Ptr long SerialNumber, @Ptr long Description, @Ptr long Dummy);
	/**
	 * Original signature : <code>FT_STATUS FT_StopInTask(FT_HANDLE)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:577</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_StopInTask") 
	@org.bridj.ann.CLong 
	public static long fTStopInTask(Pointer<? > ftHandle) {
		return fTStopInTask(Pointer.getPeer(ftHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_StopInTask") 
	@org.bridj.ann.CLong 
	protected native static long fTStopInTask(@Ptr long ftHandle);
	/**
	 * Original signature : <code>FT_STATUS FT_RestartInTask(FT_HANDLE)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:582</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_RestartInTask") 
	@org.bridj.ann.CLong 
	public static long fTRestartInTask(Pointer<? > ftHandle) {
		return fTRestartInTask(Pointer.getPeer(ftHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_RestartInTask") 
	@org.bridj.ann.CLong 
	protected native static long fTRestartInTask(@Ptr long ftHandle);
	/**
	 * Original signature : <code>FT_STATUS FT_SetResetPipeRetryCount(FT_HANDLE, DWORD)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:587</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetResetPipeRetryCount") 
	@org.bridj.ann.CLong 
	public static long fTSetResetPipeRetryCount(Pointer<? > ftHandle, int dwCount) {
		return fTSetResetPipeRetryCount(Pointer.getPeer(ftHandle), dwCount);
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_SetResetPipeRetryCount") 
	@org.bridj.ann.CLong 
	protected native static long fTSetResetPipeRetryCount(@Ptr long ftHandle, int dwCount);
	/**
	 * Original signature : <code>FT_STATUS FT_ResetPort(FT_HANDLE)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:593</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_ResetPort") 
	@org.bridj.ann.CLong 
	public static long fTResetPort(Pointer<? > ftHandle) {
		return fTResetPort(Pointer.getPeer(ftHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_ResetPort") 
	@org.bridj.ann.CLong 
	protected native static long fTResetPort(@Ptr long ftHandle);
	/**
	 * Original signature : <code>FT_STATUS FT_CyclePort(FT_HANDLE)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:598</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_CyclePort") 
	@org.bridj.ann.CLong 
	public static long fTCyclePort(Pointer<? > ftHandle) {
		return fTCyclePort(Pointer.getPeer(ftHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_CyclePort") 
	@org.bridj.ann.CLong 
	protected native static long fTCyclePort(@Ptr long ftHandle);
	/**
	 * Original signature : <code>FT_HANDLE FT_W32_CreateFile(LPCTSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:608</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_CreateFile") 
	public static Pointer<? > fTW32CreateFile(Pointer<Character > lpszName, int dwAccess, int dwShareMode, Pointer<SECURITY_ATTRIBUTES > lpSecurityAttributes, int dwCreate, int dwAttrsAndFlags, Pointer<? > hTemplate) {
		return Pointer.pointerToAddress(fTW32CreateFile(Pointer.getPeer(lpszName), dwAccess, dwShareMode, Pointer.getPeer(lpSecurityAttributes), dwCreate, dwAttrsAndFlags, Pointer.getPeer(hTemplate)));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_CreateFile") 
	@Ptr 
	protected native static long fTW32CreateFile(@Ptr long lpszName, int dwAccess, int dwShareMode, @Ptr long lpSecurityAttributes, int dwCreate, int dwAttrsAndFlags, @Ptr long hTemplate);
	/**
	 * Original signature : <code>BOOL FT_W32_CloseHandle(FT_HANDLE)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:619</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_CloseHandle") 
	public static int fTW32CloseHandle(Pointer<? > ftHandle) {
		return fTW32CloseHandle(Pointer.getPeer(ftHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_CloseHandle") 
	protected native static int fTW32CloseHandle(@Ptr long ftHandle);
	/**
	 * Original signature : <code>BOOL FT_W32_ReadFile(FT_HANDLE, LPVOID, DWORD, LPDWORD, LPOVERLAPPED)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:624</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_ReadFile") 
	public static int fTW32ReadFile(Pointer<? > ftHandle, Pointer<? > lpBuffer, int nBufferSize, Pointer<Integer > lpBytesReturned, Pointer<OVERLAPPED > lpOverlapped) {
		return fTW32ReadFile(Pointer.getPeer(ftHandle), Pointer.getPeer(lpBuffer), nBufferSize, Pointer.getPeer(lpBytesReturned), Pointer.getPeer(lpOverlapped));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_ReadFile") 
	protected native static int fTW32ReadFile(@Ptr long ftHandle, @Ptr long lpBuffer, int nBufferSize, @Ptr long lpBytesReturned, @Ptr long lpOverlapped);
	/**
	 * Original signature : <code>BOOL FT_W32_WriteFile(FT_HANDLE, LPVOID, DWORD, LPDWORD, LPOVERLAPPED)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:633</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_WriteFile") 
	public static int fTW32WriteFile(Pointer<? > ftHandle, Pointer<? > lpBuffer, int nBufferSize, Pointer<Integer > lpBytesWritten, Pointer<OVERLAPPED > lpOverlapped) {
		return fTW32WriteFile(Pointer.getPeer(ftHandle), Pointer.getPeer(lpBuffer), nBufferSize, Pointer.getPeer(lpBytesWritten), Pointer.getPeer(lpOverlapped));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_WriteFile") 
	protected native static int fTW32WriteFile(@Ptr long ftHandle, @Ptr long lpBuffer, int nBufferSize, @Ptr long lpBytesWritten, @Ptr long lpOverlapped);
	/**
	 * Original signature : <code>DWORD FT_W32_GetLastError(FT_HANDLE)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:642</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_GetLastError") 
	public static int fTW32GetLastError(Pointer<? > ftHandle) {
		return fTW32GetLastError(Pointer.getPeer(ftHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_GetLastError") 
	protected native static int fTW32GetLastError(@Ptr long ftHandle);
	/**
	 * Original signature : <code>BOOL FT_W32_GetOverlappedResult(FT_HANDLE, LPOVERLAPPED, LPDWORD, BOOL)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:647</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_GetOverlappedResult") 
	public static int fTW32GetOverlappedResult(Pointer<? > ftHandle, Pointer<OVERLAPPED > lpOverlapped, Pointer<Integer > lpdwBytesTransferred, int bWait) {
		return fTW32GetOverlappedResult(Pointer.getPeer(ftHandle), Pointer.getPeer(lpOverlapped), Pointer.getPeer(lpdwBytesTransferred), bWait);
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_GetOverlappedResult") 
	protected native static int fTW32GetOverlappedResult(@Ptr long ftHandle, @Ptr long lpOverlapped, @Ptr long lpdwBytesTransferred, int bWait);
	/**
	 * Original signature : <code>BOOL FT_W32_CancelIo(FT_HANDLE)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:655</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_CancelIo") 
	public static int fTW32CancelIo(Pointer<? > ftHandle) {
		return fTW32CancelIo(Pointer.getPeer(ftHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_CancelIo") 
	protected native static int fTW32CancelIo(@Ptr long ftHandle);
	/**
	 * Original signature : <code>BOOL FT_W32_ClearCommBreak(FT_HANDLE)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:717</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_ClearCommBreak") 
	public static int fTW32ClearCommBreak(Pointer<? > ftHandle) {
		return fTW32ClearCommBreak(Pointer.getPeer(ftHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_ClearCommBreak") 
	protected native static int fTW32ClearCommBreak(@Ptr long ftHandle);
	/**
	 * Original signature : <code>BOOL FT_W32_ClearCommError(FT_HANDLE, LPDWORD, LPFTCOMSTAT)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:722</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_ClearCommError") 
	public static int fTW32ClearCommError(Pointer<? > ftHandle, Pointer<Integer > lpdwErrors, Pointer<FTCOMSTAT > lpftComstat) {
		return fTW32ClearCommError(Pointer.getPeer(ftHandle), Pointer.getPeer(lpdwErrors), Pointer.getPeer(lpftComstat));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_ClearCommError") 
	protected native static int fTW32ClearCommError(@Ptr long ftHandle, @Ptr long lpdwErrors, @Ptr long lpftComstat);
	/**
	 * Original signature : <code>BOOL FT_W32_EscapeCommFunction(FT_HANDLE, DWORD)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:729</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_EscapeCommFunction") 
	public static int fTW32EscapeCommFunction(Pointer<? > ftHandle, int dwFunc) {
		return fTW32EscapeCommFunction(Pointer.getPeer(ftHandle), dwFunc);
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_EscapeCommFunction") 
	protected native static int fTW32EscapeCommFunction(@Ptr long ftHandle, int dwFunc);
	/**
	 * Original signature : <code>BOOL FT_W32_GetCommModemStatus(FT_HANDLE, LPDWORD)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:735</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_GetCommModemStatus") 
	public static int fTW32GetCommModemStatus(Pointer<? > ftHandle, Pointer<Integer > lpdwModemStatus) {
		return fTW32GetCommModemStatus(Pointer.getPeer(ftHandle), Pointer.getPeer(lpdwModemStatus));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_GetCommModemStatus") 
	protected native static int fTW32GetCommModemStatus(@Ptr long ftHandle, @Ptr long lpdwModemStatus);
	/**
	 * Original signature : <code>BOOL FT_W32_GetCommState(FT_HANDLE, LPFTDCB)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:741</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_GetCommState") 
	public static int fTW32GetCommState(Pointer<? > ftHandle, Pointer<FTDCB > lpftDcb) {
		return fTW32GetCommState(Pointer.getPeer(ftHandle), Pointer.getPeer(lpftDcb));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_GetCommState") 
	protected native static int fTW32GetCommState(@Ptr long ftHandle, @Ptr long lpftDcb);
	/**
	 * Original signature : <code>BOOL FT_W32_GetCommTimeouts(FT_HANDLE, FTTIMEOUTS*)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:747</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_GetCommTimeouts") 
	public static int fTW32GetCommTimeouts(Pointer<? > ftHandle, Pointer<FTTIMEOUTS > pTimeouts) {
		return fTW32GetCommTimeouts(Pointer.getPeer(ftHandle), Pointer.getPeer(pTimeouts));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_GetCommTimeouts") 
	protected native static int fTW32GetCommTimeouts(@Ptr long ftHandle, @Ptr long pTimeouts);
	/**
	 * Original signature : <code>BOOL FT_W32_PurgeComm(FT_HANDLE, DWORD)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:753</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_PurgeComm") 
	public static int fTW32PurgeComm(Pointer<? > ftHandle, int dwMask) {
		return fTW32PurgeComm(Pointer.getPeer(ftHandle), dwMask);
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_PurgeComm") 
	protected native static int fTW32PurgeComm(@Ptr long ftHandle, int dwMask);
	/**
	 * Original signature : <code>BOOL FT_W32_SetCommBreak(FT_HANDLE)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:759</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_SetCommBreak") 
	public static int fTW32SetCommBreak(Pointer<? > ftHandle) {
		return fTW32SetCommBreak(Pointer.getPeer(ftHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_SetCommBreak") 
	protected native static int fTW32SetCommBreak(@Ptr long ftHandle);
	/**
	 * Original signature : <code>BOOL FT_W32_SetCommMask(FT_HANDLE, ULONG)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:764</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_SetCommMask") 
	public static int fTW32SetCommMask(Pointer<? > ftHandle, @org.bridj.ann.CLong long ulEventMask) {
		return fTW32SetCommMask(Pointer.getPeer(ftHandle), ulEventMask);
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_SetCommMask") 
	protected native static int fTW32SetCommMask(@Ptr long ftHandle, @org.bridj.ann.CLong long ulEventMask);
	/**
	 * Original signature : <code>BOOL FT_W32_GetCommMask(FT_HANDLE, LPDWORD)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:770</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_GetCommMask") 
	public static int fTW32GetCommMask(Pointer<? > ftHandle, Pointer<Integer > lpdwEventMask) {
		return fTW32GetCommMask(Pointer.getPeer(ftHandle), Pointer.getPeer(lpdwEventMask));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_GetCommMask") 
	protected native static int fTW32GetCommMask(@Ptr long ftHandle, @Ptr long lpdwEventMask);
	/**
	 * Original signature : <code>BOOL FT_W32_SetCommState(FT_HANDLE, LPFTDCB)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:776</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_SetCommState") 
	public static int fTW32SetCommState(Pointer<? > ftHandle, Pointer<FTDCB > lpftDcb) {
		return fTW32SetCommState(Pointer.getPeer(ftHandle), Pointer.getPeer(lpftDcb));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_SetCommState") 
	protected native static int fTW32SetCommState(@Ptr long ftHandle, @Ptr long lpftDcb);
	/**
	 * Original signature : <code>BOOL FT_W32_SetCommTimeouts(FT_HANDLE, FTTIMEOUTS*)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:782</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_SetCommTimeouts") 
	public static int fTW32SetCommTimeouts(Pointer<? > ftHandle, Pointer<FTTIMEOUTS > pTimeouts) {
		return fTW32SetCommTimeouts(Pointer.getPeer(ftHandle), Pointer.getPeer(pTimeouts));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_SetCommTimeouts") 
	protected native static int fTW32SetCommTimeouts(@Ptr long ftHandle, @Ptr long pTimeouts);
	/**
	 * Original signature : <code>BOOL FT_W32_SetupComm(FT_HANDLE, DWORD, DWORD)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:788</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_SetupComm") 
	public static int fTW32SetupComm(Pointer<? > ftHandle, int dwReadBufferSize, int dwWriteBufferSize) {
		return fTW32SetupComm(Pointer.getPeer(ftHandle), dwReadBufferSize, dwWriteBufferSize);
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_SetupComm") 
	protected native static int fTW32SetupComm(@Ptr long ftHandle, int dwReadBufferSize, int dwWriteBufferSize);
	/**
	 * Original signature : <code>BOOL FT_W32_WaitCommEvent(FT_HANDLE, PULONG, LPOVERLAPPED)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:795</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_WaitCommEvent") 
	public static int fTW32WaitCommEvent(Pointer<? > ftHandle, Pointer<org.bridj.CLong > pulEvent, Pointer<OVERLAPPED > lpOverlapped) {
		return fTW32WaitCommEvent(Pointer.getPeer(ftHandle), Pointer.getPeer(pulEvent), Pointer.getPeer(lpOverlapped));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_W32_WaitCommEvent") 
	protected native static int fTW32WaitCommEvent(@Ptr long ftHandle, @Ptr long pulEvent, @Ptr long lpOverlapped);
	/**
	 * Original signature : <code>FT_STATUS FT_CreateDeviceInfoList(LPDWORD)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:818</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_CreateDeviceInfoList") 
	@org.bridj.ann.CLong 
	public static long fTCreateDeviceInfoList(Pointer<Integer > lpdwNumDevs) {
		return fTCreateDeviceInfoList(Pointer.getPeer(lpdwNumDevs));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_CreateDeviceInfoList") 
	@org.bridj.ann.CLong 
	protected native static long fTCreateDeviceInfoList(@Ptr long lpdwNumDevs);
	/**
	 * Original signature : <code>FT_STATUS FT_GetDeviceInfoList(FT_DEVICE_LIST_INFO_NODE*, LPDWORD)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:823</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetDeviceInfoList") 
	@org.bridj.ann.CLong 
	public static long fTGetDeviceInfoList(Pointer<FT_DEVICE_LIST_INFO_NODE > pDest, Pointer<Integer > lpdwNumDevs) {
		return fTGetDeviceInfoList(Pointer.getPeer(pDest), Pointer.getPeer(lpdwNumDevs));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetDeviceInfoList") 
	@org.bridj.ann.CLong 
	protected native static long fTGetDeviceInfoList(@Ptr long pDest, @Ptr long lpdwNumDevs);
	/**
	 * Original signature : <code>FT_STATUS FT_GetDeviceInfoDetail(DWORD, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPVOID, LPVOID, FT_HANDLE*)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:829</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetDeviceInfoDetail") 
	@org.bridj.ann.CLong 
	public static long fTGetDeviceInfoDetail(int dwIndex, Pointer<Integer > lpdwFlags, Pointer<Integer > lpdwType, Pointer<Integer > lpdwID, Pointer<Integer > lpdwLocId, Pointer<? > lpSerialNumber, Pointer<? > lpDescription, Pointer<Pointer<? > > pftHandle) {
		return fTGetDeviceInfoDetail(dwIndex, Pointer.getPeer(lpdwFlags), Pointer.getPeer(lpdwType), Pointer.getPeer(lpdwID), Pointer.getPeer(lpdwLocId), Pointer.getPeer(lpSerialNumber), Pointer.getPeer(lpDescription), Pointer.getPeer(pftHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetDeviceInfoDetail") 
	@org.bridj.ann.CLong 
	protected native static long fTGetDeviceInfoDetail(int dwIndex, @Ptr long lpdwFlags, @Ptr long lpdwType, @Ptr long lpdwID, @Ptr long lpdwLocId, @Ptr long lpSerialNumber, @Ptr long lpDescription, @Ptr long pftHandle);
	/**
	 * Original signature : <code>FT_STATUS FT_GetDriverVersion(FT_HANDLE, LPDWORD)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:846</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetDriverVersion") 
	@org.bridj.ann.CLong 
	public static long fTGetDriverVersion(Pointer<? > ftHandle, Pointer<Integer > lpdwVersion) {
		return fTGetDriverVersion(Pointer.getPeer(ftHandle), Pointer.getPeer(lpdwVersion));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetDriverVersion") 
	@org.bridj.ann.CLong 
	protected native static long fTGetDriverVersion(@Ptr long ftHandle, @Ptr long lpdwVersion);
	/**
	 * Original signature : <code>FT_STATUS FT_GetLibraryVersion(LPDWORD)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:852</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetLibraryVersion") 
	@org.bridj.ann.CLong 
	public static long fTGetLibraryVersion(Pointer<Integer > lpdwVersion) {
		return fTGetLibraryVersion(Pointer.getPeer(lpdwVersion));
	}
	@Convention(Convention.Style.StdCall) 
	@Name("FT_GetLibraryVersion") 
	@org.bridj.ann.CLong 
	protected native static long fTGetLibraryVersion(@Ptr long lpdwVersion);
	/**
	 * Original signature : <code>FT_STATUS FT_Rescan()</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:858</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_Rescan") 
	@org.bridj.ann.CLong 
	public static native long fTRescan();
	/**
	 * Original signature : <code>FT_STATUS FT_Reload(WORD, WORD)</code><br>
	 * <i>native declaration : lib\ftd2xx\ftd2xx.h:863</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@Name("FT_Reload") 
	@org.bridj.ann.CLong 
	public static native long fTReload(short wVid, short wPid);
	/** Undefined type */
	public static interface ULONG_PTR {
		
	};
}
